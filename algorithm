/*
계기: C공부 중, 알고리즘 등 다양한 코드를 작성하는데 있어, 성능이 더 나은 코드로 고쳐보려 고민해 보았습니다.
특히 Switch-case를 공부하면서 데이터, 혹은 함수를 호출할때 이들의 종류가 많아질수록 코드의 가독성 저하와 더불어 성능이 저하됨을 알았습니다. 
따라서 단점을 보완해보고자 Look Up Table을 이용해 보았습니다.

주제: 함수 포인터의 배열을 Look Up Table로 활용한 간단한 코드 작성해보기.


코드: 사용자가 입력한 값으로부터 함수 호출하기.
*/


#include <stdio.h>


void Test1(int input1)
{
   puts("이 함수는 Test1입니다.");
}
void Test2(int input2)
{
   puts("이 함수는 Test2입니다.");
}
void Test3(int input3)
{
   puts("이 함수는 Test3입니다.");
}
 int main(void)
    
{
   void(*ptarray[3])(int) = {
      Test1,Test2,Test3 
   }; //함수 포인터의 배열(LUT)

   int input;
   scanf_s("%d", &input);
   
   ptarray[input](10);

   return 0;
}
